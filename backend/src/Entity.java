import java.net.InetAddress;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.HashMap;
import java.time.LocalDateTime;
import java.util.function.Supplier;

public abstract class Entity {
    private int uuid;
    private String name;
    private String state;
    private HashMap<String, String> link;
    private String[] children;
    private int depth;
    private HashMap<String, String> dmp;

    Entity(String name, String state, HashMap<String, String> link, String[] children, HashMap<String, String> dmp) {
        this.name = name;
        this.state = state;
        this.link = link;
        this.children = children;

        dmp.putAll(generateDMP());
        this.dmp = dmp; // adds dmp from front and to the one generated by backend
    }

    public String parseType() {
        return "root";
    }

    private HashMap<String, String> generateDMP() {
        HashMap<String, Supplier<String>> backendDMP_supplier = new HashMap<>();
        HashMap<String, String> backendDMP = new HashMap<>();
        backendDMP_supplier.put("creationTime", safe(() -> LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)));
        backendDMP_supplier.put("backendClient", safe(() -> InetAddress.getLocalHost().getHostName()));

        for (String key : backendDMP_supplier.keySet()) {
            try {
                backendDMP.put(key, backendDMP_supplier.get(key).get());
            } catch (Exception e) {
                backendDMP.put(key, "failed:" + e.getMessage());
            }
        }
        return backendDMP;
    }

    // method for Summplier class, simplifies error handling for in generateDMP().
    public static Supplier<String> safe(SupplierWithException<String> supplier) {
        return () -> {
            try {
                return supplier.get();
            } catch (Exception e) {
                return "unknown";
            }
        };
    }
    // @FunctionalInterface lets you run a lamba with wrapper function.
    // In safe(SupplierWithException<String>supplier) we return result from Supplier or "unknown" in dmp entry
    @FunctionalInterface
    interface SupplierWithException<T> {
        T get() throws Exception;
    }

    // getters:
    public String getName() {
        return this.name;
    }

    public String getState() {
        return this.state;
    }

    public HashMap<String, String> getLink() {
        return this.link;
    }

    public String[] getChildren() {
        return this.children;
    }

    public int getDepth() {
        return this.depth;
    }

    public HashMap<String, String> getDmp() {
        return this.dmp;
    }

    // adders and setters
    public void setUUID(int uuid) {
        this.uuid = uuid;
    }

    public void addChild(int uuid) {
        this.children.add
    }
}