import java.net.InetAddress;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.time.LocalDateTime;
import java.util.Map;
import java.util.function.Supplier;

public abstract class Entity {
    protected int uuid = -1;
    protected String name;
    protected String state;
    protected HashMap<String, String> link;
    protected String children = "";
    protected int depth;
    protected HashMap<String, String> dmp;

    public static Entity constructFromDB(HashMap<String, String> params, String name, HashMap<String, String> link, String state, int depth) {return null;};

    public static Map<String, Class<? extends Entity>> classMap = Map.of(
            "Project", Project.class,
            "Calender", Calendar.class,
            "Root", Root.class
    );

    Entity(String name, String state, HashMap<String, String> link, HashMap<String, String> dmp) {
        this.name = name;
        this.state = state;
        this.link = link;

        if (dmp == null) {
            this.dmp = new HashMap<>();
        }

        for (Map.Entry<String, String> entry : generateDMP().entrySet()) {
            dmp.putIfAbsent(entry.getKey(), entry.getValue());
        }

        this.dmp = dmp; // adds dmp from front and to the one generated by backend
    }


    public String parseType() {
        return "root";
    }

    public void replaceInDB(Entity newItem, DBhandler db) throws IllegalArgumentException {
        if (!this.getClass().equals(newItem.getClass())) {
            throw new IllegalArgumentException("New and old item must be same type \noldItem: " + this.getClass().getSimpleName() + " | newItem: " + newItem.getClass().getSimpleName());
        }

        newItem.setChildren(this.getChildren());
        newItem.setDepth(this.getDepth());
        newItem.setUUID(this.getUUID());


        db.update(uuid, newItem);
    }

    public void createChild(Entity child, DBhandler db) throws IllegalArgumentException {
        if (this.getClass().getSimpleName().equals("Root")) {
            db.create(child);
            return;
        }

        if (!child.getClass().equals(this.getClass())) {
            throw new IllegalArgumentException("Parent and child must be same type\nparent: " + this.getClass().getSimpleName() + " | child: " + child.getClass().getSimpleName());
        }

        db.create(this, child);
    }


    private HashMap<String, String> generateDMP() {
        HashMap<String, Supplier<String>> backendDMP_supplier = new HashMap<>();
        HashMap<String, String> backendDMP = new HashMap<>();
        backendDMP_supplier.put("creationTime", safe(() -> LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)));
        backendDMP_supplier.put("backendClient", safe(() -> InetAddress.getLocalHost().getHostName()));

        for (String key : backendDMP_supplier.keySet()) {
            try {
                backendDMP.put(key, backendDMP_supplier.get(key).get());
            } catch (Exception e) {
                backendDMP.put(key, "failed:" + e.getMessage());
            }
        }
        return backendDMP;
    }

    // method for Summplier class, simplifies error handling for in generateDMP().
    private static Supplier<String> safe(SupplierWithException<String> supplier) {
        return () -> {
            try {
                return supplier.get();
            } catch (Exception e) {
                return "unknown";
            }
        };
    }


    // @FunctionalInterface lets you run a lamba with wrapper function.
    // In safe(SupplierWithException<String>supplier) we return result from Supplier or "unknown" if supplier throws exception
    @FunctionalInterface
    interface SupplierWithException<T> {
        T get() throws Exception;
    }

    // getters:
    public String getName() {
        return this.name;
    }

    public String getState() {
        return this.state;
    }

    public HashMap<String, String> getLink() {
        return this.link;
    }

    public String getChildren() {
        return this.children;
    }

    public int getDepth() {
        return this.depth;
    }

    public int getUUID() {
        return this.uuid;
    }

    public HashMap<String, String> getDmp() {
        return this.dmp;
    }

    // adders and setters
    public void setUUID(int uuid) {
        this.uuid = uuid;
    }

    public void setDepth(int depth) {
        this.depth = depth;
    }

    public void setChildren(String children) {
        this.children = children;
    }

    public void clearDmp() {
        this.dmp = new HashMap<>();
    }

    public void sync(DBhandler db) {
        Entity upToDate = db.read(getUUID(), true);
        this.children = upToDate.children;
        this.state = upToDate.state;
        this.link = upToDate.link;
        this.name = upToDate.name;
        this.depth = upToDate.depth;
        this.dmp = upToDate.dmp;
    }

    public String toStringWithoutDMP() {
        StringBuilder stringBuilder = new StringBuilder();

        stringBuilder.append("{uuid: " + uuid);
        stringBuilder.append(", name: " + name);
        stringBuilder.append(", state: " + state);
        stringBuilder.append(", link: " + link);
        stringBuilder.append(", children: " + children);
        stringBuilder.append(", depth: " + depth);
        stringBuilder.append("}\n");

        return stringBuilder.toString();
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();

        stringBuilder.append("{uuid: " + uuid);
        stringBuilder.append(", name: " + name);
        stringBuilder.append(", state: " + state);
        stringBuilder.append(", link: " + link);
        stringBuilder.append(", children: " + children);
        stringBuilder.append(", depth: " + depth);
        stringBuilder.append(", dmp: " + dmp);
        stringBuilder.append("}\n");

        return stringBuilder.toString();
    }
}